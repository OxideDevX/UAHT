import {useState} from 'react';
import classNames from 'classnames';
import Image from 'next/image';
import {Row, Text, Button, Checkbox} from '@nextui-org/react';
import {Info} from '@space/components/Info';
import {Address, RequestButton} from './common';
import {createCode} from './helpers';
import styles from './wallet.module.scss';

export enum JAR_VALUE {
  jam = 'jam',
  pie = 'pie',
}

export const Jar = ({MM, stamp}: any) => {
  const priority = 0;
  const [value, setValue] = useState(JAR_VALUE.jam);
  const [ack, setAck] = useState(false);

  return (
    <div>
      <Row align="center" className={styles.pl05}>
        <Text color="$gray800">{value === JAR_VALUE.jam ? `üçØ` : `üç∞`} –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—è:</Text>
        <Button.Group size="sm" auto color="gradient" ghost key={value}>
          <Button
            title="–î–∂–µ–º-–ø—É–ª"
            onClick={() => setValue(JAR_VALUE.jam)}
            className={classNames({[styles.action]: value === JAR_VALUE.jam})}
          >
            –î–∂–µ–º
          </Button>
          <Button
            title="–û–ø–µ—Ä–∞—Ü—ñ–π–Ω–∞ —á–∞—Å—Ç–∫–∞"
            onClick={() => setValue(JAR_VALUE.pie)}
            className={classNames({[styles.action]: value === JAR_VALUE.pie})}
          >
            –ü–∞–π
          </Button>
        </Button.Group>
      </Row>
      <div className={styles.mv1}>
        {value === JAR_VALUE.jam ? (
          <Text small color="grey">
            üîê –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è uniswap-–ø—É–ª—ñ–≤ –ø–æ–≤–Ω–æ–≥–æ –¥—ñ–∞–ø–∞–∑–æ–Ω—É MATIC ‚Üî UAHT ‚Üî USDT üå±
            <br />
            –ü—Ä–∏–∫–ª–∞–¥{' '}
            <a
              href="https://opensea.io/0xB0AA11ad57386c91Fe8FA26E4F32121f9a0Ede03"
              target="_blank"
              rel="noreferrer"
            >
              –¥–∂–µ–º-–ø—É–ª–∞ üëÄ
            </a>
          </Text>
        ) : (
          <Text small color="grey">
            üîê –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è allowance - –æ–ø–µ—Ä–∞—Ü—ñ–π–Ω–∞ —á–∞—Å—Ç–∫–∞ —Å–ø—ñ–ª—å–Ω–æ—Ç–∏ UAHT
            <br />
            –ü–∞–π –¥–æ–∑–≤–æ–ª—è—î –æ–ø–µ—Ä—É–≤–∞—Ç–∏ –æ–±–ª—ñ–∫–æ–º —Ç–æ–∫–µ–Ω—ñ–≤ –≤ –º–µ–∂–∞—Ö –≤–Ω–µ—Å–µ–Ω–æ–≥–æ —Å—Ç–µ–π–∫–∞{' '}
            <Image src="/icon.png" width="15" height="15" alt="UAHT" />
          </Text>
        )}
      </div>
      <div className={styles.mv1}>
        <Checkbox isSelected={ack} size="xs" onChange={a => setAck(a)}>
          <Row wrap="wrap">
            —Ä–æ–∑—É–º—ñ—é —ñ–Ω–≤–µ—Å—Ç–∏—Ü—ñ–π–Ω—ñ —Ä–∏–∑–∏–∫–∏&nbsp;
            <a
              href="https://academy.binance.com/uk/articles/what-are-smart-contracts"
              target="_blank"
              rel="noreferrer"
            >
              —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç—ñ–≤
            </a>
            &nbsp;—Ç–∞&nbsp;
            <a
              href="https://academy.binance.com/uk/articles/what-are-liquidity-pools-in-defi"
              target="_blank"
              rel="noreferrer"
            >
              –ø—É–ª—ñ–≤ –ª—ñ–∫–≤—ñ–¥–Ω–æ—Å—Ç—ñ üê≥
            </a>
          </Row>
        </Checkbox>
      </div>
      <Row className={styles.mv1} align="center" wrap="wrap">
        <RequestButton disabled={!ack} />
        {ack ? (
          <>
            <Address
              className={styles.ml1}
              account={createCode({
                priority,
                stamp,
                type: 'i',
                source: 'jar',
                value,
                account: MM.account,
              })}
            />
            <Info text="–°–∫–æ–ø—ñ—é–π —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤ –∫–æ–¥ –∑–∞–ø–∏—Ç—É ü§ù" className={styles.ml1} />
          </>
        ) : null}
      </Row>
      <div>
        <Text small color="grey">
          * —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó —Ç–∞ —á–∞–π –∑–∞ –∑–≥–æ–¥–æ—é —Å—Ç–æ—Ä—ñ–Ω
        </Text>
      </div>
    </div>
  );
};
